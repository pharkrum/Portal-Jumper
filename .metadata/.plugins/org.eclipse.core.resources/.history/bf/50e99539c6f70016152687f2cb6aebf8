package com.redes.game.socket;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Inet4Address;
import java.net.Socket;

import com.redes.game.Game;
import com.redes.game.Handler;
import com.redes.game.Id;
import com.redes.game.entity.mob.Player;
import com.redes.game.entity.mob.Status;

public class Network extends Thread {
	public Socket client;
	public int port;
	
	public Handler handler;
	public Player player1, player2;
	
	public DataInputStream input;
	public DataOutputStream output;
	
	public boolean closing = false;

	public Network(int port, Handler handler){
		this.port = port;
		this.handler = handler;
	}	

	//CLIENT
	public void run(){	
		
		try{
			client = new Socket(Inet4Address.getLocalHost().getHostAddress(),port);	
					
			while(true){
					
				if (client != null){
					
					input = new DataInputStream(client.getInputStream());
					output = new DataOutputStream(client.getOutputStream());

					if (Game.playing && !Game.showDeathScreen){
						
						
						player1 = (Player)handler.entitys.get(1);
						player2 = (Player)handler.entitys.get(2);
			    		
			    		String player2Info;
			    	
			        	//output
			        	player2Info = player2.getX()+"#"+player2.getY()+"#"+player2.getVelX()+"#"+player2.jumping+"#"+player2.gravity+"#"+Game.LocalPoints;
			        	output.writeUTF(player2Info);
			        	
			        	String msg = input.readUTF();

			        	String[] parts = msg.split("#");
			        	int x = Integer.parseInt(parts[0]);
			        	int y = Integer.parseInt(parts[1]);
			        	int velX = Integer.parseInt(parts[2]);
			        	boolean jumping = Boolean.parseBoolean(parts[3]);
			        	double gravity = Double.parseDouble(parts[4]);
			        	Game.EnemyPoints = Integer.parseInt(parts[5]);
			        	
				        if(velX < -1){
				        	player1.facing = 0;
				        }else if(velX > 1){
				        	player1.facing = 1;
				        }
				        
				        player1.setX(x);
				        player1.setY(y);
				    	player1.setVelX(velX);
				    	if (gravity == 10.0){
				    		player1.gravity = gravity;
					    	player1.jumping = jumping;
				    	}
				    	
				    	if(Game.EnemyPoints == 3){
				    		Game.showDeathScreen = true;
				    		Game.enemyWin = true;
				    		Game.gameOver = true;
				    	}
				    		
				    	else if (Game.LocalPoints == 3){
				    		player2Info = player2.getX()+"#"+player2.getY()+"#"+player2.getVelX()+"#"+player2.jumping+"#"+player2.gravity+"#"+Game.LocalPoints;
				        	output.writeUTF(player2Info);
				    		Game.showDeathScreen = true;
				    		Game.localWin = true;
				    		Game.gameOver = true;
				    	}
				 	    
			        	if(closing==true){
				        	break;
				        }
			        }
				}  				
			}  
			output.close();
			client.close();
			System.out.println("Conexão encerrada");
		}
			catch(Exception e){
				System.out.println("Error: " + e.getMessage());
				Game.launcher.buttons[2].setLabel("Connect to server");
			}
	}
}
